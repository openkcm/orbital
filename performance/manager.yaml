# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-config
data:
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_USER: "orbitaluser"
  POSTGRES_PASSWORD: "password"
  POSTGRES_DB: "orbital"
  POSTGRES_SSLMODE: "disable"
  SERVER_PORT: "8080"
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: manager
  namespace: default
  labels:
    app: manager
spec:
  selector:
    matchLabels:
      app: manager
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container:  manager
      labels:
        app: manager
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:17-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: test-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: test-config
              key: POSTGRES_PORT
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: test-config
              key: POSTGRES_USER
        command: ["sh", "-c"]
        args:
        - |
          until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      containers:
      - name: manager
        image: localhost/manager:latest
        imagePullPolicy: Never
        resources:
          requests:
            cpu: "1"
            memory: 800Mi
          limits:
            cpu: "1"
            memory: 800Mi
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        envFrom:
          - configMapRef:
              name: test-config
        ports:
        - containerPort: 8080
          name: manager
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /usr/share/zoneinfo/Asia/Taipei
      restartPolicy: Always
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: manager-service
  namespace: default
spec:
  selector:
    app: manager
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secret
  labels:
    app: postgres
data:
  POSTGRES_DB: orbital
  POSTGRES_USER: orbitaluser
  POSTGRES_PASSWORD: password
---
# PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /data/postgresql
---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: 'postgres:17-alpine'
          args: ["-c", "max_connections=200"]
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdata
      volumes:
        - name: postgresdata
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: default
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: LoadBalancer